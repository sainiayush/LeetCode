class Solution{
public:
  int findMinStep(string board, string hand){
    const int ans = dfs(board + '#', hand, {});
    return ans == INF ? -1 : ans;
  }
private:
  const int INF = numeric_limits<int>::max();
  inline int dfs(string&& board, const string& hand, unordered_map<string, int>&& memo){
    const string& hashKey = board + '#' + hand;
    if(const auto it = memo.find(hashKey); it != cend(memo))
      return it -> second;

    board = deDup(board);
    if(board == "#")  
      return 0;
    
    unordered_set<char> boardSet = unordered_set<char> (begin(board), end(board));

    string hs;
    for(const char h: hand)
      if(boardSet.count(h))
        hs += h;
    
    if(hs.empty())
      return INF;
    
    int ans = INF;

    for(int i=0; i<size(board); ++i)
      for(int j=0; j<size(hs); ++j){
        // Place hs[j] in board
        const string& newHand = hs.substr(0, j) + hs.substr(j + 1);
        string newBoard = board.substr(0, i) + hs[j] + board.substr(i);
        const int res = dfs(move(newBoard), newHand, move(memo));

        if(res < INF)
          ans = min(ans, 1 + res);
      }

    return memo[hashKey] = ans;
  }
  inline string deDup(string board){
    int start = 0;
    for(int i=0; i<size(board); ++i)
      if(board[i] != board[start]){
        if(i - start >= 3)
          return deDup(board.substr(0, start) + board.substr(i));
        start = i;    // Meet a new sequence
      }
    return board;
  }
};
