#define REP(i,n) for(int i=0;i<n;++i)
class Solution {
    bool good(vector<string>& board){
        REP(i,3){
            if(board[i][0] != ' ' && board[i][0]==board[i][1] && board[i][1]==board[i][2])
                return false;
            if(board[0][i]!=' ' && board[0][i]==board[1][i] && board[1][i]==board[2][i])
                return false;
        }
        if(board[0][0] != ' ' && board[0][0]==board[1][1] && board[1][1]==board[2][2])
            return false;
        if(board[2][0] != ' ' && board[2][0]==board[1][1] && board[1][1]==board[0][2])
            return false;
        
        return true;
    }
public:
    bool validTicTacToe(vector<string>& board) {
        int n=board.size();
        int d[2]={};
        REP(i,n) 
            REP(j,n) {
                if(board[i][j]=='X') d[0]++;
                else if(board[i][j]=='O') d[1]++;
            }
        
        if(d[0]==d[1]+1){
            REP(i,3) REP(j,3){
                if(board[i][j]=='X'){
                    board[i][j]=' ';
                    if(good(board))
                        return 1;
                    board[i][j]='X';
                }
            }
            return 0;
        }
        else if(d[0]==d[1]){
            if(d[0]==0)
                return 1;
            REP(i,3) REP(j,3){
                if(board[i][j]=='O'){
                    board[i][j]=' ';
                    if(good(board))
                        return 1;
                    board[i][j]='O';
                }
            }
            return 0;
        }
        return 0;
    }
};
