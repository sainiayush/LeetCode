class Solution{
public:
  int maximumMinimumPath(const vector<vector<int>>& mat){
    const int n = size(mat), m = size(mat[0]);

    int l = 0, r = 1E9;
    while(l != r){
      int mid = (l + r + 1) / 2;
      if(!check(mat, mid))
        r = mid - 1;
      else
        l = mid;
    }
    return r;
  }
private:
const pair<int, int> dirs[4] = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};
  bool check(const vector<vector<int>>& mat, const int& limit){
    if(mat[0][0] < limit) return false;

    const int n = size(mat), m = size(mat[0]);
    vector<vector<bool>> flag(n, vector<bool>(m));

    queue<tuple<int, int>> Q;
    Q.emplace(0, 0);
    int ans = mat[0][0];

    while(!Q.empty()){
      const auto [i, j] = Q.front();
      Q.pop();

      flag[i][j] = true;
      for(const auto& [dir_i, dir_j]: dirs){
        int x = i + dir_i;
        int y = j + dir_j;
        if(min(x, y) < 0 || x == n || y == m) continue;
        if(flag[x][y] || mat[x][y] < limit) continue;

        Q.emplace(x, y);
      }
    }
    return flag[n - 1][m - 1];
  }
};
