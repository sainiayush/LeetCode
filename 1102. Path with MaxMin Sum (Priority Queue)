struct T{
  int i;
  int j;
  int val;
  T(int i, int j, int val) : i(i), j(j), val(val) {}
};
class Solution{
public:
  int maximumMinimumPath(vector<vector<int>>& mat){
    const int n = size(mat);
    const int m = size(mat[0]);

    const vector<int> dirs{0, 1, 0, -1 ,0};
    int ans = mat[0][0];

    auto compare = [&] (const T& a, const T& b){ return a.val < b.val;};
    priority_queue<T, vector<T>, decltype(compare)> maxHeap(compare);

    maxHeap.emplace(0, 0, mat[0][0]);

    vector<vector<bool>> seen(n, vector<bool>(m));
    while(!maxHeap.empty()){
      const auto [i, j, val] = maxHeap.top();
      maxHeap.pop();
      ans = min(ans, val);

      if(i == n - 1 && j == m - 1) 
        return ans;
      seen[i][j] = true;
      for(int k=0; k<4; ++k){
        const int x = i + dirs[k];
        const int y = j + dirs[k + 1];

        if(x < 0 || x == n || y < 0 || y == m) continue;
        if(seen[x][y]) continue;

        maxHeap.emplace(x, y, mat[x][y]);
      }
    }
    throw;
  }
};
