struct DSU {
  vector<int> par, rnk, sz;
  int c;
  DSU(int n) : par(n + 1), rnk(n + 1, 0), sz(n + 1, 1), c(n) {
    for (int i = 1; i <= n; ++i) par[i] = i;
  }
  int find(int i) {
    return (par[i] == i ? i : (par[i] = find(par[i])));
  }
  bool same(int i, int j) {
    return find(i) == find(j);
  }
  int get_size(int i) {
    return sz[find(i)];
  }
  int operator[] (int u){
    return find(u);
  }
  int count() {
    return c;    //connected components
  }
  bool merge(int i, int j) {
    if ((i = find(i)) == (j = find(j))) return false;
    else --c;
    if (rnk[i] > rnk[j]) swap(i, j);
    par[i] = j;
    sz[j] += sz[i];
    if (rnk[i] == rnk[j]) rnk[j]++;
    return true;
  }
};

class Solution{
public:
  int earliestAcq(vector<vector<int>>& logs, const int& n){
    DSU dsu(n);
    sort(begin(logs), end(logs), [&] (vector<int>& a, vector<int>& b){
      return a.front() < b.front();
    });

    for(const vector<int>& log: logs){
      const int timestamp = log[0];
      const int u = log[1];
      const int v = log[2];
      dsu.merge(u, v);
      if(dsu.count() == 1) return timestamp;
    }
    throw;
  }
};
