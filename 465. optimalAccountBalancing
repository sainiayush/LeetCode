#include<bits/stdc++.h>
using namespace std;

class Solution{
public:
  int minTransactions(vector<tuple<int, int, int>>& transactions){
    vector<int> balance(21);
    vector<int> debt;

    const int n = size(transactions);
    for(int i=0; i<n; ++i){
      auto [from, to, amount] = transactions[i];
      balance[from] -= amount;
      balance[to] += amount;
    }

    for(const int& b: balance)
      if(b != 0)
        debt.emplace_back(b);
    return dfs(debt, 0);
  }
private:
  int dfs(vector<int>& debt, int index){
    while(index < size(debt) && !debt[index])
      ++index;
    if(index == size(debt))
      return 0;
    
    int ans = INT_MAX;
    for(int i = index + 1; i < size(debt); ++i)
      if(debt[index] * debt[i] < 0){
        debt[i] += debt[index];  //Debt[index] settled
        ans = min(ans, 1 + dfs(debt, index + 1));
        debt[i] -= debt[index];  //Backtrack
      }
    return ans;
  }
};
int main(){
  int n;
  cin >> n;
  vector<tuple<int, int, int>> transactions;
  for(int i=0; i<n; ++i){
    int from, to, amount;
    cin >> from >> to >> amount;
    transactions.push_back(make_tuple(from, to, amount));
  }

  Solution solution;
  cout << solution.minTransactions(transactions);
  return 0;
}
