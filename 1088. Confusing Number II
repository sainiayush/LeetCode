class Solution{
public:
  int confusingNumberII(int n){
    return dfs(n, 0, 0, 1);
  }
private:
  vector<pair<int, int>> digitToRotated {{0, 0}, {1, 1}, {6, 9}, {8, 8}, {9, 6}};
  int dfs(const int& n, int num, int rotatedNum, int unit){
    int ans = (num != rotatedNum);
    for(const auto& [digit, rotated]: digitToRotated){
      if(digit == 0 && num == 0) continue;
      const int nextNum = num * 10 + digit;
      if(nextNum > n) break;
      ans += dfs(n, nextNum, rotatedNum + unit * rotated, unit * 10);
    }
    return ans;
  }
};
