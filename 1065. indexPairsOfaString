#include<bits/stdc++.h>
using namespace std;
#define size(container) static_cast<int>(container.size())

class Trie{
public:
  vector<Trie*> children;
  bool isEnd = false;
  Trie() : children(26) {}

  void insert(const string& word){
    Trie* node = this;
    for(const char& c: word){
      int index = c - 'a';
      if(node->children[index] == nullptr)
        node->children[index] = new Trie();
      node = node->children[index];
    }
    node->isEnd = true;
  }
};

class Solution{
public:
  vector<vector<int>> indexPairs(const string& text, const vector<string>& words){
    Trie* trie = new Trie();
    for(const string& word : words)
      trie -> insert(word);
    
    vector<vector<int>> ans;
    const int n = size(text);
    for(int i=0; i<n; ++i){
      Trie* node = trie;
      for(int j=i; j<n; ++j){
        int idx = text[j] - 'a';
        if(node->children[idx] == nullptr) break;
        node = node->children[idx];
        if(node -> isEnd)
          ans.push_back({i, j}); 
      }
    }
    return ans;
  }
};
int main(){
  string str;
  getline(cin, str);

  int n;
  cin >> n;
  vector<string> d;
  d.resize(n);
  for(int i=0; i<n; ++i) cin >> d[i];

  Solution solution;
  vector<vector<int>> ans = solution.indexPairs(str, d);
  for(int i=0; i<size(ans); ++i)
    for(int j=0; j<size(ans[i]); ++j)
      cout << ans[i][j] << " \n"[j == size(ans[i]) - 1];
  return 0;
}
