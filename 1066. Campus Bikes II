class Solution{
public:
  int assignBikes(const vector<pair<int, int>>& bikes, const vector<pair<int, int>>& workers){
    const int bikeCombinations = 1 << size(bikes);
    vector<int> dp(bikeCombinations);
    return assignBikes(bikes, workers, dp, 0, 0);
  } 
private:
  int assignBikes(const vector<pair<int, int>>& bikes, const vector<pair<int, int>>& workers, vector<int>& dp, int s, int bikesUsed){
    if(s == size(workers))
      return 0;
    if(dp[bikesUsed])
      return dp[bikesUsed];
    
    int ans = INT_MAX;
    for(int i=0; i<size(bikes); ++i)
      if(!(bikesUsed >> i & 1)){
        ans = min(ans, dist(workers[s], bikes[i]) + assignBikes(bikes, workers, dp, s + 1, bikesUsed | (1 << i)));
      }
    return dp[bikesUsed] = ans;
  }

  inline int dist(const pair<int, int>& p1, const pair<int, int>& p2){
    return abs(p1.first - p2.first) + abs(p1.second - p2.second); 
  }
};
