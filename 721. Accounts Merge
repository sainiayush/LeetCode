class Solution {
public:
    vector<int> father;
    int fa(int a) {
        return father[a] == a ? a : father[a] = fa(father[a]);
    }
    void merge(int a, int b) {
        int aa = fa(a), bb = fa(b);
        father[bb] = aa;
    }
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        int n = accounts.size();
        map<string, int> mp;
        father.resize(n);
        for (int i = 0; i < n; i++) {
            father[i] = i;
        }
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < accounts[i].size(); j++) {
                if (mp.find(accounts[i][j]) != mp.end()) {
                    merge(fa(mp.at(accounts[i][j])), fa(i));
                } else {
                    mp[accounts[i][j]] = i;
                }
            }
        }
        for (int i = 0; i < n; i++) {
            father[i] = fa(father[i]);
        }
        map<int, vector<string> > mres;
        for (int i = 0; i < n; i++) {
            for (int j = 1; j < accounts[i].size(); j++) {
                mres[father[i]].push_back(accounts[i][j]);
            }
        }
        vector<vector<string> > res;
        for (auto item : mres) {
            vector<string> subres;
            subres.push_back(accounts[item.first][0]);
            sort(item.second.begin(), item.second.end());
            int cnt = unique(item.second.begin(), item.second.end()) - item.second.begin();
            for (int i = 0; i < cnt; i++) {
                subres.push_back(item.second[i]);
            }
            res.push_back(subres);
        }
        return res;
    }
};
