template<typename T>
ostream& operator <<(ostream& o,vector<T>& v){
    for(T&x: v)
        o<<x<<' ';
    return o;
}
class Solution {
public:
    vector<string> subdomainVisits(vector<string>& cpdomains) {
        map<string,int> mpp;
        
        for(string &str: cpdomains){
            stringstream ss(str);
            
            int cnt;
            string chunks;
            ss>>cnt;
            ss>>chunks;
            
            vector<string> subdomains;
            string s;
            
            stringstream sss(chunks);
            while(getline(sss,s,'.')){
                subdomains.emplace_back(s);
            }
            cout<<subdomains<<"\n";
            vector<string> sub;
            for(int i=0;i<subdomains.size();++i){
                string s=subdomains[i];
                for(int j=i+1;j<subdomains.size();++j)
                    s += '.'+subdomains[j];
                mpp[s] += cnt;
            }
        }
        vector<string>ans;
        
        for(auto &[x,y]: mpp){
            ans.emplace_back(to_string(y)+' '+x);
        }
        return ans;
    }
};
